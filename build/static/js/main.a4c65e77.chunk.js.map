{"version":3,"sources":["services/room-service.js","store/actions/actionsRoom/room.js","store/actions/actionsRoom/actionTypes.js","services/userService.js","store/actions/actionsUser/user.js","store/actions/actionsUser/actionTypes.js","components/RoomRow/RoomRow.js","components/RoomList/RoomList.js","pages/Room/RoomPage.js","utility/date-formatter.js","components/Login/Login.js","components/AddNewUser/AddNewUser.js","App.js","serviceWorker.js","store/reducers/room/room.js","store/reducers/user/user.js","index.js"],"names":["queryRoom","date","a","console","log","axios","post","updateRoomTimeByUser","roomVal","_queryRoom","data","type","payload","query","dispatch","_updateRoomMeetingHandler","updateRoomMeetingHandler","value","login","user","removeUser","insertUser","_loginUser","_insertUserHandler","RoomRow","time","userInfo","id","useDispatch","className","fromStart","toEnd","occupiedBy","name","onClick","updatedTime","isAvialable","actions","disabled","_id","RoomList","room","times","map","key","uniqid","RoomPage","useSelector","state","roomReducer","userReducer","useEffect","today","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","getDateFormatter","Date","Login","useState","setUserInfo","userInfoState","onLogin","e","preventDefault","onSubmit","onChange","valueTxt","target","prevState","length","AddNewUser","isDisplayInput","setIsDisplayInput","App","minDate","setMinDate","setDate","d","newMonth","setYear","getYear","setMonth","t","min","handlerDate","Boolean","window","location","hostname","match","initialState","reducer","action","copyRoom","cloneDeep","reqIdx","findIndex","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4c65e77.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst ROOM_URL = (process.env.NODE_ENV !== 'development')\r\n    ? '/room'\r\n    : '//localhost:8080/room';\r\n\r\nexport const queryRoom = async (date) => {\r\n    console.log('queryRoom', date)\r\n    return await axios.post(ROOM_URL, {date});\r\n};\r\n\r\nexport const updateRoomTimeByUser = async (roomVal) => {\r\n    return await axios.post(`${ROOM_URL}/update-room-meeting`, roomVal);\r\n};","import * as actionTypes from './actionTypes';\r\nimport { queryRoom, updateRoomTimeByUser } from '../../../services/room-service';\r\n\r\nexport const _queryRoom = (data) => {\r\n    return {\r\n        type: actionTypes.SET_ROOM,\r\n        payload: data\r\n    }\r\n};\r\n\r\n\r\nexport const query = (date) => async (dispatch) => {\r\n    try {\r\n        const { data } = await queryRoom(date);\r\n        if (data) {\r\n            dispatch(_queryRoom(data))\r\n        };\r\n    } catch (err) {\r\n        console.log('ERROR FROM  QUERY ROOM', err);\r\n    }\r\n};\r\n\r\nconst _updateRoomMeetingHandler = (data) => {\r\n    return {\r\n        type: actionTypes.UPDATE_ROOM_TIME,\r\n        payload: data\r\n    }\r\n};\r\n\r\nexport const updateRoomMeetingHandler = (roomVal) => async (dispatch) => {\r\n    try {\r\n        const { data } = await updateRoomTimeByUser(roomVal);\r\n        if (data.value) {\r\n            dispatch(_updateRoomMeetingHandler(roomVal))\r\n        }\r\n    } catch (err) {\r\n        console.log('ERROR FROM  updateRoomMeetingHandler ROOM', err);\r\n\r\n    }\r\n}","export const SET_ROOM = 'SET_ROOM';\r\nexport const UPDATE_ROOM_TIME = 'UPDATE_ROOM_TIME';\r\n","import axios from 'axios';\r\n\r\nconst USER_URL = (process.env.NODE_ENV !== 'development')\r\n    ? '/user'\r\n    : '//localhost:8080/user';\r\n\r\nconst LOGIN_URL = (process.env.NODE_ENV !== 'development')\r\n    ? '/login'\r\n    : '//localhost:8080/login';\r\n\r\nexport const login = async (user) => {\r\n    return await axios.post(LOGIN_URL, user);\r\n};\r\n\r\nexport const removeUser = async (user) => {\r\n    return await axios.post(`${USER_URL}/remove`, user);\r\n}\r\n\r\nexport const insertUser = async (user) => {\r\n    return await axios.post(`${USER_URL}/insert`, user);\r\n};","import * as actionTypes from './actionTypes';\r\nimport { login, removeUser, insertUser } from '../../../services/userService';\r\n\r\nexport const _loginUser = (data) => {\r\n    return {\r\n        type: actionTypes.SET_USER,\r\n        payload: data\r\n    }\r\n};\r\n\r\nexport const _logoutUser = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_USER,\r\n        payload: null\r\n    }\r\n}\r\n\r\nexport const loginUser = (user) => async (dispatch) => {\r\n    try {\r\n        const { data } = await login(user);\r\n        if (data) {\r\n            dispatch(_loginUser(data))\r\n        };\r\n    } catch (err) {\r\n        console.log('ERROR UPDATE ACTIVAVTE USER', err);\r\n    }\r\n};\r\n\r\nexport const _removeUserHandler = (data) => {\r\n    return {\r\n        type: actionTypes.CLEAR_USER,\r\n        payload: data\r\n    }\r\n};\r\n\r\nexport const removeUserHandler = (user) => async (dispatch) => {\r\n    try {\r\n        await removeUser(user);\r\n    } catch (err) {\r\n        console.log('ERROR OCCURED IN removeUser FUNCTION');\r\n    }\r\n    dispatch(_logoutUser());\r\n};\r\n\r\nconst _insertUserHandler = (data) => {\r\n    return {\r\n        type: actionTypes.ADD_NEW_USER,\r\n        payload: data\r\n    }\r\n}\r\n\r\n\r\nexport const insertUserHandler = user => async (dispatch) => {\r\n    try {\r\n        const { data } = await insertUser(user);\r\n        if (data) {\r\n            dispatch(_insertUserHandler(data))\r\n        }\r\n    } catch (err) {\r\n        console.log('ERROR OCCURED IN insertUserHandler FUNCTION');\r\n\r\n    }\r\n};","export const SET_USER = 'SET_USER';\r\nexport const CLEAR_USER = 'CLEAR_USER';\r\nexport const ADD_NEW_USER = 'ADD_NEW_USER';\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst RoomRow = ({ time, userInfo, id }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const onInviteRoomMeeting = () => {\r\n        const updatedTime = {\r\n            ...time,\r\n            isAvialable: false,\r\n            occupiedBy: userInfo.name,\r\n            id\r\n        };\r\n        dispatch(actions.updateRoomMeetingHandler(updatedTime));\r\n    };\r\n\r\n    const onCancelRoomMeeting = () => {\r\n        const updatedTime = {\r\n            ...time,\r\n            isAvialable: true,\r\n            occupiedBy: '',\r\n            id\r\n        };\r\n        dispatch(actions.updateRoomMeetingHandler(updatedTime));\r\n    };\r\n\r\n    return (\r\n        <div className={`flex space-between`}>\r\n            <div>{time.fromStart} - {time.toEnd}</div>\r\n            {!time.occupiedBy ? <button disabled={!userInfo._id} onClick={onInviteRoomMeeting}>Invite</button> :\r\n                <>\r\n                    {time.occupiedBy === userInfo.name ? <button onClick={onCancelRoomMeeting}>Cancel</button> : <span>Occupied By {time.occupiedBy}</span>}\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RoomRow;","import React from 'react';\r\nimport RoomRow from '../RoomRow/RoomRow';\r\nimport uniqid from 'uniqid';\r\n\r\nconst RoomList = ({ room, userInfo }) => {\r\n    return (\r\n        <div>\r\n            {room ? room.times.map(time => (\r\n                <RoomRow id={room._id} userInfo={userInfo} time={time} key={uniqid()}/>\r\n            )) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RoomList;","import React, { useEffect } from 'react';\r\nimport RoomList from '../../components/RoomList/RoomList';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport { getDateFormatter } from '../../utility/date-formatter';\r\n\r\n\r\nconst RoomPage = () => {\r\n    const room = useSelector(state => state.roomReducer.room);\r\n    const userInfo = useSelector(state => state.userReducer.userInfo);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(actions.query(getDateFormatter(new Date())));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <>\r\n            {room && room._id ? <div>\r\n                <RoomList room={room} userInfo={userInfo}/>\r\n            </div> : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RoomPage;","export const getDateFormatter = (date) => {\r\n    var today = date;\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n\r\n    today = yyyy + '-' + mm + '-' + dd;\r\n    return today;\r\n};\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport * as actions from '../../store/actions/index';\r\nimport * as actionTypes from '../../store/actions/actionsUser/actionTypes';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst Login = () => {\r\n    const [userInfo, setUserInfo] = useState({ name: '' });\r\n    const userInfoState = useSelector(state => state.userReducer.userInfo);\r\n    const dispatch = useDispatch()\r\n\r\n    const handlerUserInfo = (valueTxt, key) => {\r\n        setUserInfo(prevState => ({ ...prevState, [key]: valueTxt }));\r\n    };\r\n\r\n    const onLogin = (e) => {\r\n        e.preventDefault();\r\n        dispatch(actions.loginUser(userInfo));\r\n        setUserInfo({ name: '' });\r\n    };\r\n\r\n    const onLogout = () => {\r\n        dispatch({ type: actionTypes.CLEAR_USER });\r\n        setUserInfo({ name: '' });\r\n    };\r\n\r\n    const onReemoveUser = () => {\r\n        dispatch(actions.removeUserHandler(userInfoState))\r\n        setUserInfo({ name: '' });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={(e) => onLogin(e)}>\r\n                <input value={userInfo.name} onChange={(e) => handlerUserInfo(e.target.value, 'name')} />\r\n                {!userInfoState._id ? <button disabled={!userInfo.name.length} type=\"submit\">Login</button> : null}\r\n            </form>\r\n            {userInfoState && userInfoState._id ? <div>\r\n                <button onClick={onLogout}>Logout</button>\r\n                <button onClick={onReemoveUser}>Remove User</button>\r\n            </div>\r\n                : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst AddNewUser = () => {\r\n    const [isDisplayInput, setIsDisplayInput] = useState(false);\r\n    const [userInfo, setUserInfo] = useState({ name: '' });\r\n    const dispatch = useDispatch();\r\n\r\n    const handlerUserInfo = (valueTxt, key) => {\r\n        setUserInfo(prevState => ({ ...prevState, [key]: valueTxt }));\r\n    };\r\n\r\n    const onAddNewUser = () => {\r\n        dispatch(actions.insertUserHandler(userInfo));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => setIsDisplayInput(true)}>Click to add user</button>\r\n            {isDisplayInput ? <div>\r\n                <input value={userInfo.name} onChange={(e) => handlerUserInfo(e.target.value, 'name')} />\r\n                <button onClick={onAddNewUser}>Add</button>\r\n            </div> : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddNewUser;  ","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport RoomPage from './pages/Room/RoomPage';\nimport Login from './components/Login/Login';\nimport AddNewUser from './components/AddNewUser/AddNewUser';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from './store/actions/index';\n\nfunction App() {\n  const userInfoState = useSelector(state => state.userReducer.userInfo);\n  const [minDate, setMinDate] = useState();\n  const [date, setDate] = useState();\n  const dispatch = useDispatch()\n\n  const getDateFormatter = (date) => {\n    var today = date;\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n\n    today = yyyy + '-' + mm + '-' + dd;\n    return today;\n  };\n\n  useEffect(() => {\n    var d = new Date();\n    var newMonth = d.getMonth() - 1;\n    if (newMonth < 0) {\n      newMonth += 12;\n      d.setYear(d.getYear() - 1);\n    }\n    d.setMonth(newMonth);\n    const t = getDateFormatter(new Date(d));\n    setMinDate(t)\n  }, [])\n\n\n  const handlerDate = (e) => {\n    setDate(e);\n  };\n\n  const onSearch = () => {\n    dispatch(actions.query(date));\n  };\n\n  return (\n    <div>\n      <input min={minDate} type=\"date\" onChange={(e) => handlerDate(e.target.value)} />\n      <button onClick={onSearch} disabled={!date}>Search</button>\n      <Login />\n      {userInfoState && userInfoState._id ? null : <AddNewUser />}\n      <RoomPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../../actions/actionsRoom/actionTypes';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nconst initialState = {\r\n    room: {},\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_ROOM:\r\n            return {\r\n                ...state,\r\n                room: action.payload\r\n            }\r\n        case actionTypes.UPDATE_ROOM_TIME:\r\n            const copyRoom = cloneDeep(state.room);\r\n            let reqIdx = copyRoom.times.findIndex(time => time.fromStart === action.payload.fromStart && time.toEnd === action.payload.toEnd);\r\n            copyRoom.times[reqIdx] = action.payload;\r\n            return {\r\n                ...state,\r\n                room: copyRoom\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import * as actionTypes from '../../actions/actionsUser/actionTypes';\r\nconst initialState = {\r\n    userInfo: {},\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                userInfo: action.payload\r\n            }\r\n        case actionTypes.ADD_NEW_USER:\r\n            return {\r\n                ...state,\r\n                userInfo: action.payload\r\n            }\r\n        case actionTypes.CLEAR_USER:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport roomReducer from './store/reducers/room/room';\nimport userReducer from './store/reducers/user/user';\n\nconst rootReducer = combineReducers({\n    roomReducer,\n    userReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}